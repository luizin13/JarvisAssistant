/**
 * Dispatcher para o modo MULTIAGENTE INTENSIVO
 * 
 * Inspirado no conceito de ciclos iterativos onde m√∫ltiplos agentes
 * trabalham em sequ√™ncia, cada um agregando valor ao resultado anterior.
 * 
 * Este m√≥dulo implementa o padr√£o descrito no modelo Python fornecido pelo usu√°rio,
 * mas adaptado para TypeScript e integrado ao sistema multi-agente existente.
 */

import { AgentType, Task, TaskStep } from './multi-agent-system';
import * as slackService from '../slack';
import OpenAI from 'openai';
import Anthropic from '@anthropic-ai/sdk';

// Configura√ß√£o das APIs
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
});

/**
 * Interface para as op√ß√µes de configura√ß√£o do dispatcher intensivo
 */
export interface IntensiveDispatcherOptions {
  maxCycles: number;       // N√∫mero m√°ximo de ciclos
  timeout: number;         // Tempo m√°ximo por ciclo em ms
  notifyOnProgress: boolean; // Enviar notifica√ß√µes de progresso via Slack
  agents: AgentType[];     // Agentes a serem usados no modo intensivo
}

/**
 * Resultado de um ciclo do dispatcher
 */
export interface CycleResult {
  agentType: AgentType;
  content: string;
  timestamp: string;
  metadata?: Record<string, any>;
}

/**
 * Classe principal do dispatcher para o modo intensivo
 */
export class IntensiveDispatcher {
  private options: IntensiveDispatcherOptions;
  private history: CycleResult[] = [];
  private currentContext: string = '';
  private task?: Task;
  private stepId?: string;
  private isRunning: boolean = false;
  private shouldStop: boolean = false;
  
  constructor(options: IntensiveDispatcherOptions) {
    this.options = {
      maxCycles: options.maxCycles || 5,
      timeout: options.timeout || 60000,
      notifyOnProgress: options.notifyOnProgress !== undefined ? options.notifyOnProgress : true,
      agents: options.agents || [
        AgentType.COORDINATOR,
        AgentType.RESEARCHER,
        AgentType.ANALYST,
        AgentType.ADVISOR,
        AgentType.SUMMARIZER
      ]
    };
  }
  
  /**
   * Executa um ciclo completo com todos os agentes definidos
   * @param initialContext Contexto inicial para o ciclo
   * @returns Promise com o resultado do ciclo
   */
  public async runCycle(initialContext: string): Promise<string> {
    this.currentContext = initialContext;
    
    for (const agentType of this.options.agents) {
      try {
        console.log(`ü§ñ Executando agente ${agentType} no modo intensivo...`);
        
        // Executa o agente atual com o contexto
        const result = await this.executeAgent(agentType, this.currentContext);
        
        // Registra o resultado
        const cycleResult: CycleResult = {
          agentType,
          content: result,
          timestamp: new Date().toISOString(),
        };
        
        this.history.push(cycleResult);
        
        // Atualiza o contexto para o pr√≥ximo agente
        this.currentContext = result;
        
        // Notifica via Slack se habilitado
        if (this.options.notifyOnProgress && slackService.isSlackConfigured()) {
          await slackService.sendNotification(
            `üîÑ Modo INTENSIVO: Agente ${this.formatAgentType(agentType)} concluiu sua an√°lise.`
          );
        }
        
        // Verifica se devemos parar o processamento
        if (this.shouldStop) {
          console.log('‚õî Processamento interrompido manualmente.');
          break;
        }
      } catch (error) {
        console.error(`‚ùå Erro ao executar agente ${agentType} no modo intensivo:`, error);
        
        // Registra o erro mas continua com o pr√≥ximo agente
        this.history.push({
          agentType,
          content: `Erro: ${error instanceof Error ? error.message : 'Erro desconhecido'}`,
          timestamp: new Date().toISOString(),
        });
      }
    }
    
    return this.currentContext;
  }
  
  /**
   * Inicia o processo de execu√ß√£o do modo intensivo
   * @param task Tarefa associada ao modo intensivo
   * @param stepId ID da etapa atual
   * @param initialContext Contexto inicial
   * @returns Promise com o resultado final
   */
  public async start(task: Task, stepId: string, initialContext: string): Promise<string> {
    if (this.isRunning) {
      throw new Error('O dispatcher j√° est√° em execu√ß√£o');
    }
    
    this.isRunning = true;
    this.shouldStop = false;
    this.task = task;
    this.stepId = stepId;
    this.history = [];
    
    console.log(`üöÄ Iniciando modo MULTIAGENTE INTENSIVO para tarefa ${task.id}`);
    
    try {
      // Notifica in√≠cio via Slack
      if (this.options.notifyOnProgress && slackService.isSlackConfigured()) {
        await slackService.sendNotification(
          `üöÄ Modo MULTIAGENTE INTENSIVO iniciado para tarefa: "${task.title}"`
        );
      }
      
      // Loop principal de ciclos
      let context = initialContext;
      for (let cycle = 0; cycle < this.options.maxCycles && !this.shouldStop; cycle++) {
        console.log(`‚è≥ Iniciando ciclo ${cycle + 1}/${this.options.maxCycles}`);
        
        // Executa um ciclo completo com todos os agentes
        const updatedContext = await this.runCycle(context);
        
        // Atualiza o contexto para o pr√≥ximo ciclo
        context = updatedContext;
        
        console.log(`‚úÖ Ciclo ${cycle + 1} completo`);
        
        // Notifica progresso via Slack
        if (this.options.notifyOnProgress && slackService.isSlackConfigured()) {
          await slackService.sendNotification(
            `üìä Modo INTENSIVO: Ciclo ${cycle + 1}/${this.options.maxCycles} completo.`
          );
        }
      }
      
      // Gera sum√°rio dos resultados
      const summary = await this.generateSummary(context);
      
      console.log(`üèÅ Modo MULTIAGENTE INTENSIVO conclu√≠do com sucesso`);
      
      // Notifica conclus√£o via Slack
      if (this.options.notifyOnProgress && slackService.isSlackConfigured()) {
        await slackService.sendNotification(
          `üèÅ Modo MULTIAGENTE INTENSIVO conclu√≠do para tarefa: "${task.title}"`
        );
      }
      
      return summary;
    } catch (error) {
      console.error('‚ùå Erro durante a execu√ß√£o do modo intensivo:', error);
      
      // Notifica erro via Slack
      if (this.options.notifyOnProgress && slackService.isSlackConfigured()) {
        await slackService.sendNotification(
          `‚ö†Ô∏è Erro no modo MULTIAGENTE INTENSIVO: ${error instanceof Error ? error.message : 'Erro desconhecido'}`
        );
      }
      
      throw error;
    } finally {
      this.isRunning = false;
    }
  }
  
  /**
   * Interrompe a execu√ß√£o atual do dispatcher
   */
  public stop(): void {
    if (this.isRunning) {
      console.log('üõë Solicitando interrup√ß√£o do modo intensivo...');
      this.shouldStop = true;
    }
  }
  
  /**
   * Gera um sum√°rio dos resultados do modo intensivo
   * @param finalContext Contexto final ap√≥s todos os ciclos
   * @returns Promise com o sum√°rio
   */
  private async generateSummary(finalContext: string): Promise<string> {
    try {
      // Usa o Claude para gerar um sum√°rio mais elaborado
      // NOTA: A API mais recente do Claude n√£o suporta o campo "system", deve estar em um "user" inicial
      const systemMessage = "Voc√™ √© um assistente especializado em sintetizar informa√ß√µes e gerar relat√≥rios executivos. Apresente um resumo conciso e bem estruturado dos resultados do processamento multi-agente intensivo.";
      
      const response = await anthropic.messages.create({
        model: "claude-3-7-sonnet-20250219",
        max_tokens: 2000,
        messages: [
          {
            role: "user",
            content: `${systemMessage}\n\nPor favor, gere um resumo executivo bem estruturado dos resultados do processamento multi-agente intensivo que realizamos. A seguir est√£o os resultados finais:\n\n${finalContext}\n\nOrganize o resumo por t√≥picos principais, destacando insights mais importantes, recomenda√ß√µes pr√°ticas e pr√≥ximos passos sugeridos.`
          }
        ]
      });
      
      // Extrai o primeiro bloco de texto do conte√∫do
      const content = response.content[0];
      if (typeof content === 'object' && 'type' in content && content.type === 'text') {
        return content.text;
      }
      
      return `Sum√°rio do modo intensivo:\n\n${finalContext}`;
      
    } catch (error) {
      console.error('Erro ao gerar sum√°rio:', error);
      return `Sum√°rio do modo intensivo:\n\n${finalContext}`;
    }
  }
  
  /**
   * Executa um agente espec√≠fico com o contexto fornecido
   * @param agentType Tipo do agente a ser executado
   * @param context Contexto para o agente
   * @returns Promise com o resultado do agente
   */
  private async executeAgent(agentType: AgentType, context: string): Promise<string> {
    try {
      const systemPrompt = this.getSystemPromptForAgent(agentType);
      
      // Timeout para evitar que um agente demore demais
      const timeoutPromise = new Promise<never>((_, reject) => {
        setTimeout(() => reject(new Error('Timeout ao executar agente')), this.options.timeout);
      });
      
      // Executa o agente com o modelo adequado
      const executionPromise = this.executeWithModel(agentType, systemPrompt, context);
      
      // Corre contra o timeout
      return await Promise.race([executionPromise, timeoutPromise]);
    } catch (error) {
      console.error(`Erro ao executar agente ${agentType}:`, error);
      throw error;
    }
  }
  
  /**
   * Executa uma chamada ao modelo apropriado para o agente
   * @param agentType Tipo do agente
   * @param systemPrompt Prompt do sistema para o agente
   * @param userContext Contexto do usu√°rio
   * @returns Promise com a resposta do modelo
   */
  private async executeWithModel(
    agentType: AgentType, 
    systemPrompt: string, 
    userContext: string
  ): Promise<string> {
    // Determina qual modelo usar com base no tipo de agente
    const useAnthropic = [
      AgentType.RESEARCHER,
      AgentType.ANALYST,
      AgentType.SUMMARIZER,
      AgentType.EVALUATOR
    ].includes(agentType);
    
    if (useAnthropic) {
      // Usa o Claude da Anthropic, combinando o system prompt com o contexto do usu√°rio
      const response = await anthropic.messages.create({
        model: "claude-3-7-sonnet-20250219",
        max_tokens: 4000,
        messages: [
          { 
            role: "user", 
            content: `${systemPrompt}\n\n${userContext}` 
          }
        ]
      });
      
      // Extrai o primeiro bloco de texto do conte√∫do
      const content = response.content[0];
      if (typeof content === 'object' && 'type' in content && content.type === 'text') {
        return content.text;
      }
      
      return userContext;
    } else {
      // Usa o GPT-4o da OpenAI
      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userContext }
        ],
        max_tokens: 4000
      });
      
      return response.choices[0].message.content || '';
    }
  }
  
  /**
   * Obt√©m o prompt do sistema apropriado para o tipo de agente
   * @param agentType Tipo do agente
   * @returns Prompt do sistema
   */
  private getSystemPromptForAgent(agentType: AgentType): string {
    // Prompts adaptados para o modo intensivo
    const prompts: Record<AgentType, string> = {
      [AgentType.COORDINATOR]: `Voc√™ √© o Coordenador no modo intensivo, respons√°vel por:
1. Compreender o contexto completo da tarefa e o estado atual da an√°lise
2. Identificar os aspectos mais relevantes para focar nos pr√≥ximos passos
3. Determinar quais informa√ß√µes adicionais s√£o necess√°rias
4. Propor um plano de a√ß√£o claro e estruturado para os pr√≥ximos agentes
5. Garantir que todas as perspectivas importantes sejam consideradas

Trabalhe com o contexto fornecido, avaliando o que j√° foi feito e o que ainda precisa ser explorado.
Mantenha o foco no objetivo principal e forne√ßa uma vis√£o de alto n√≠vel que orientar√° o trabalho dos pr√≥ximos agentes.`,

      [AgentType.PLANNER]: `Voc√™ √© o Planejador no modo intensivo, respons√°vel por:
1. Analisar o contexto atual e transform√°-lo em um plano detalhado
2. Dividir quest√µes complexas em etapas menores e gerenci√°veis
3. Identificar depend√™ncias e sequ√™ncias l√≥gicas de a√ß√£o
4. Propor abordagens alternativas quando apropriado
5. Estruturar o plano de forma que outros agentes possam execut√°-lo

Seja met√≥dico, exaustivo e pragm√°tico. Considere restri√ß√µes de tempo e recursos.
Forne√ßa um plano detalhado, com etapas numeradas e claramente definidas.`,

      [AgentType.RESEARCHER]: `Voc√™ √© o Pesquisador no modo intensivo, respons√°vel por:
1. Aprofundar o conhecimento sobre os t√≥picos centrais identificados
2. Buscar fatos, dados e evid√™ncias relevantes
3. Apresentar m√∫ltiplas perspectivas e pontos de vista
4. Identificar tend√™ncias recentes e desenvolvimentos na √°rea
5. Fornecer contexto adicional que enriquece a an√°lise

Foque em ampliar o conhecimento dispon√≠vel no contexto atual.
Seja preciso, factual e comprometido com a qualidade das informa√ß√µes.
Priorize profundidade nos pontos centrais ao inv√©s de amplitude em t√≥picos tangenciais.`,

      [AgentType.ANALYST]: `Voc√™ √© o Analista no modo intensivo, respons√°vel por:
1. Interpretar os dados e informa√ß√µes dispon√≠veis
2. Identificar padr√µes, tend√™ncias e anomalias relevantes
3. Avaliar o significado e implica√ß√µes das descobertas
4. Conectar diferentes pontos de informa√ß√£o para formar uma vis√£o hol√≠stica
5. Destacar insights n√£o √≥bvios que podem ter alto valor

Aplique pensamento cr√≠tico, rigor anal√≠tico e racioc√≠nio estruturado.
Diferencie claramente fatos, infer√™ncias e especula√ß√µes.
Sempre conecte sua an√°lise ao contexto espec√≠fico e objetivo central da tarefa.`,

      [AgentType.ADVISOR]: `Voc√™ √© o Consultor no modo intensivo, respons√°vel por:
1. Transformar an√°lises em recomenda√ß√µes pr√°ticas e acion√°veis
2. Priorizar sugest√µes com base em impacto potencial e viabilidade
3. Justificar cada recomenda√ß√£o com dados e an√°lises
4. Antecipar obst√°culos e propor estrat√©gias para super√°-los
5. Adaptar suas recomenda√ß√µes ao contexto espec√≠fico do usu√°rio

Ofere√ßa conselhos claros, diretos e pragm√°ticos.
Seja espec√≠fico sobre o "como fazer", n√£o apenas o "o que fazer".
Priorize alta alavancagem - a√ß√µes que produzem resultados significativos com recursos razo√°veis.`,

      [AgentType.SUMMARIZER]: `Voc√™ √© o Sintetizador no modo intensivo, respons√°vel por:
1. Condensar informa√ß√µes complexas em um formato claro e compreens√≠vel
2. Extrair os pontos mais importantes e insights centrais
3. Estruturar o conte√∫do de forma l√≥gica e coerente
4. Preservar o significado essencial enquanto remove detalhes excessivos
5. Conectar todas as partes em uma narrativa unificada

Priorize clareza e concis√£o enquanto mant√©m precis√£o e nuance.
Organize o conte√∫do em se√ß√µes l√≥gicas com t√≠tulos informativos.
Destaque os pontos de maior valor e impacto potencial.`,

      [AgentType.EXECUTOR]: `Voc√™ √© o Executor no modo intensivo, respons√°vel por:
1. Transformar planos em a√ß√µes concretas e detalhadas
2. Desenvolver procedimentos operacionais passo a passo
3. Identificar ferramentas, recursos e m√©todos necess√°rios
4. Antecipar desafios pr√°ticos e propor solu√ß√µes
5. Definir crit√©rios claros para medir progresso e sucesso

Seja pr√°tico, detalhista e orientado √† implementa√ß√£o.
Forne√ßa instru√ß√µes t√£o espec√≠ficas que possam ser seguidas sem ambiguidade.
Considere restri√ß√µes reais de tempo, recursos e capacidades.`,

      [AgentType.EVALUATOR]: `Voc√™ √© o Avaliador no modo intensivo, respons√°vel por:
1. Analisar criticamente o trabalho realizado at√© o momento
2. Verificar se as solu√ß√µes propostas atendem aos requisitos originais
3. Identificar pontos fortes e √°reas de melhoria
4. Avaliar riscos e poss√≠veis consequ√™ncias indesejadas
5. Sugerir refinamentos e ajustes espec√≠ficos

Seja objetivo, justo e construtivo em suas avalia√ß√µes.
Baseie suas avalia√ß√µes em crit√©rios claros e relevantes.
Ofere√ßa feedback espec√≠fico que possa levar a melhorias concretas.`,

      [AgentType.CRITIC]: `Voc√™ √© o Cr√≠tico no modo intensivo, respons√°vel por:
1. Identificar falhas l√≥gicas, pressupostos question√°veis e pontos fracos
2. Desafiar o pensamento convencional e questionar premissas
3. Considerar cen√°rios adversos e edge cases n√£o contemplados
4. Avaliar a robustez das solu√ß√µes propostas
5. Propor alternativas para problemas identificados

Seja incisivo, espec√≠fico e rigoroso, mas sempre construtivo.
Para cada problema que apontar, sugira uma solu√ß√£o ou abordagem melhor.
Priorize quest√µes cr√≠ticas que poderiam comprometer o sucesso da tarefa.`,

      [AgentType.TRANSPORT_EXPERT]: `Voc√™ √© o Especialista em Transporte no modo intensivo, focado em:
1. Analisar aspectos log√≠sticos e operacionais de transporte
2. Identificar oportunidades de otimiza√ß√£o de rotas e custos
3. Avaliar tecnologias e inova√ß√µes relevantes para o setor
4. Considerar aspectos regulat√≥rios e de compliance
5. Propor estrat√©gias para melhorar efici√™ncia e sustentabilidade

Aplique conhecimento especializado do setor de transporte no Brasil.
Considere tend√™ncias atuais, desafios espec√≠ficos e melhores pr√°ticas.
Adapte suas recomenda√ß√µes ao contexto espec√≠fico da empresa do usu√°rio.`,

      [AgentType.FARM_EXPERT]: `Voc√™ √© o Especialista em Agricultura no modo intensivo, focado em:
1. Analisar aspectos de produ√ß√£o agr√≠cola e gest√£o de fazendas
2. Identificar oportunidades de aumento de produtividade e sustentabilidade
3. Avaliar tecnologias e inova√ß√µes relevantes para o agroneg√≥cio
4. Considerar aspectos clim√°ticos, sazonais e ambientais
5. Propor estrat√©gias para otimizar opera√ß√µes agr√≠colas

Aplique conhecimento especializado do agroneg√≥cio brasileiro.
Considere tend√™ncias atuais, desafios espec√≠ficos e melhores pr√°ticas.
Adapte suas recomenda√ß√µes √†s caracter√≠sticas espec√≠ficas das propriedades do usu√°rio.`,

      [AgentType.FINANCE_EXPERT]: `Voc√™ √© o Especialista Financeiro no modo intensivo, focado em:
1. Analisar aspectos financeiros e oportunidades de investimento
2. Identificar estrat√©gias para otimiza√ß√£o fiscal e de capital
3. Avaliar oportunidades de financiamento e cr√©dito
4. Considerar riscos financeiros e estrat√©gias de mitiga√ß√£o
5. Propor abordagens para melhorar rentabilidade e fluxo de caixa

Aplique conhecimento especializado do mercado financeiro brasileiro.
Considere o ambiente econ√¥mico atual, tend√™ncias e regulamenta√ß√µes.
Adapte suas recomenda√ß√µes √† situa√ß√£o financeira espec√≠fica do usu√°rio.`,

      [AgentType.TECH_EXPERT]: `Voc√™ √© o Especialista em Tecnologia no modo intensivo, focado em:
1. Analisar solu√ß√µes tecnol√≥gicas e oportunidades de inova√ß√£o
2. Identificar tecnologias emergentes relevantes para o neg√≥cio
3. Avaliar infraestrutura e sistemas existentes
4. Considerar aspectos de ciberseguran√ßa e prote√ß√£o de dados
5. Propor estrat√©gias para transforma√ß√£o digital e automa√ß√£o

Aplique conhecimento especializado do cen√°rio tecnol√≥gico atual.
Considere tend√™ncias, custos de implementa√ß√£o e retorno sobre investimento.
Adapte suas recomenda√ß√µes ao contexto tecnol√≥gico atual do usu√°rio.`,

      [AgentType.PERSONAL_COACH]: `Voc√™ √© o Coach Pessoal no modo intensivo, focado em:
1. Analisar aspectos de desenvolvimento pessoal e profissional
2. Identificar oportunidades de crescimento e aprendizado
3. Avaliar padr√µes comportamentais e mindset
4. Considerar equil√≠brio entre vida pessoal e profissional
5. Propor estrat√©gias para aumentar produtividade e bem-estar

Aplique princ√≠pios de coaching e desenvolvimento pessoal.
Considere os objetivos, valores e desafios espec√≠ficos do usu√°rio.
Ofere√ßa orienta√ß√£o pr√°tica, motivadora e baseada em evid√™ncias.`
    };
    
    // Retorna o prompt espec√≠fico ou um gen√©rico se n√£o encontrar
    return prompts[agentType] || `Voc√™ √© um especialista em ${this.formatAgentType(agentType)}. 
Analise cuidadosamente o contexto fornecido e forne√ßa insights valiosos, 
recomenda√ß√µes pr√°ticas e pr√≥ximos passos dentro da sua √°rea de especialidade.`;
  }
  
  /**
   * Formata blocos para mensagem do Slack com o progresso de um agente
   * @param agentType Tipo do agente
   * @param result Resultado do agente
   * @returns Blocos formatados para o Slack
   */
  private formatSlackProgressBlocks(agentType: AgentType, result: string): any[] {
    // Limita o resultado a 2000 caracteres para o Slack
    const truncatedResult = result.length > 2000 
      ? result.substring(0, 2000) + '... (truncado)'
      : result;
      
    return [
      {
        type: 'header',
        text: {
          type: 'plain_text',
          text: `üîÑ Progresso do Modo INTENSIVO`,
          emoji: true
        }
      },
      {
        type: 'section',
        fields: [
          {
            type: 'mrkdwn',
            text: `*Agente:*\n${this.formatAgentType(agentType)}`
          },
          {
            type: 'mrkdwn',
            text: `*Tarefa:*\n${this.task?.title || 'N/A'}`
          }
        ]
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: `*Resultado:*\n${truncatedResult}`
        }
      },
      {
        type: 'context',
        elements: [
          {
            type: 'mrkdwn',
            text: `Ciclo: ${this.history.filter(h => h.agentType === agentType).length} | Timestamp: ${new Date().toLocaleString('pt-BR')}`
          }
        ]
      },
      {
        type: 'divider'
      }
    ];
  }
  
  /**
   * Formata blocos para mensagem do Slack com o sum√°rio final
   * @param summary Sum√°rio do processamento
   * @returns Blocos formatados para o Slack
   */
  private formatSlackSummaryBlocks(summary: string): any[] {
    // Limita o sum√°rio a 3000 caracteres para o Slack
    const truncatedSummary = summary.length > 3000 
      ? summary.substring(0, 3000) + '... (truncado - veja o resultado completo no sistema)'
      : summary;
      
    return [
      {
        type: 'header',
        text: {
          type: 'plain_text',
          text: `üèÅ Sum√°rio do Modo INTENSIVO`,
          emoji: true
        }
      },
      {
        type: 'section',
        fields: [
          {
            type: 'mrkdwn',
            text: `*Tarefa:*\n${this.task?.title || 'N/A'}`
          },
          {
            type: 'mrkdwn',
            text: `*Total de Ciclos:*\n${Math.ceil(this.history.length / this.options.agents.length)}`
          }
        ]
      },
      {
        type: 'section',
        text: {
          type: 'mrkdwn',
          text: `*Resultado Final:*\n${truncatedSummary}`
        }
      },
      {
        type: 'context',
        elements: [
          {
            type: 'mrkdwn',
            text: `Conclu√≠do em: ${new Date().toLocaleString('pt-BR')}`
          }
        ]
      }
    ];
  }
  
  /**
   * Formata o tipo de agente para exibi√ß√£o
   * @param agentType Tipo do agente
   * @returns Nome formatado
   */
  private formatAgentType(agentType: AgentType): string {
    const nameMap: Record<AgentType, string> = {
      [AgentType.COORDINATOR]: 'üë®‚Äçüíº Coordenador',
      [AgentType.PLANNER]: 'üìù Planejador',
      [AgentType.RESEARCHER]: 'üîç Pesquisador',
      [AgentType.ANALYST]: 'üìä Analista',
      [AgentType.ADVISOR]: 'üß† Consultor',
      [AgentType.SUMMARIZER]: 'üìã Sintetizador',
      [AgentType.EXECUTOR]: '‚öôÔ∏è Executor',
      [AgentType.EVALUATOR]: '‚öñÔ∏è Avaliador',
      [AgentType.CRITIC]: 'üî¨ Cr√≠tico',
      [AgentType.TRANSPORT_EXPERT]: 'üöö Especialista em Transporte',
      [AgentType.FARM_EXPERT]: 'üåæ Especialista em Agricultura',
      [AgentType.FINANCE_EXPERT]: 'üí∞ Especialista Financeiro',
      [AgentType.TECH_EXPERT]: 'üíª Especialista em Tecnologia',
      [AgentType.PERSONAL_COACH]: 'üßò Coach Pessoal'
    };
    
    return nameMap[agentType] || `Agente ${agentType}`;
  }
  
  /**
   * Obt√©m o hist√≥rico completo de execu√ß√£o
   * @returns Array com o hist√≥rico
   */
  public getHistory(): CycleResult[] {
    return [...this.history];
  }
  
  /**
   * Retorna informa√ß√µes detalhadas sobre o status atual do dispatcher
   * @returns Objeto com informa√ß√µes de status
   */
  public getStatus(): any {
    // Calcula estat√≠sticas sobre os ciclos
    const completedCycles = this.history.length;
    const totalCycles = this.options.maxCycles * this.options.agents.length;
    const failedCycles = this.history.filter(cycle => cycle.content.startsWith('Erro:')).length;
    
    // Calcula tempo m√©dio por ciclo se houver ciclos completos
    let averageTimePerCycle = 0;
    if (completedCycles > 1) {
      const firstTimestamp = new Date(this.history[0].timestamp).getTime();
      const lastTimestamp = new Date(this.history[completedCycles - 1].timestamp).getTime();
      averageTimePerCycle = (lastTimestamp - firstTimestamp) / (completedCycles - 1);
    }
    
    // Coleta logs para monitoramento
    const logs: string[] = [];
    
    // Adiciona logs de inicializa√ß√£o
    if (this.task) {
      logs.push(`[${new Date().toISOString()}] Tarefa: ${this.task.title}`);
      logs.push(`[${new Date().toISOString()}] Agentes envolvidos: ${this.options.agents.join(', ')}`);
      logs.push(`[${new Date().toISOString()}] M√°ximo de ciclos: ${this.options.maxCycles}`);
    }
    
    // Adiciona logs do progresso atual
    logs.push(`[${new Date().toISOString()}] Progresso: ${completedCycles}/${totalCycles} ciclos (${Math.round(completedCycles/totalCycles*100)}%)`);
    
    // Pega informa√ß√µes do √∫ltimo agente executado (se houver)
    const currentAgentType = this.history.length > 0 ? 
      this.history[this.history.length - 1].agentType : 
      this.options.agents[0];
    
    // Determina o pr√≥ximo agente (se houver)
    const currentAgentIndex = this.options.agents.indexOf(currentAgentType);
    const nextAgentType = currentAgentIndex < this.options.agents.length - 1 ? 
      this.options.agents[currentAgentIndex + 1] : 
      null;
    
    if (nextAgentType) {
      logs.push(`[${new Date().toISOString()}] Pr√≥ximo agente: ${nextAgentType}`);
    }
    
    // Retorna objeto com todas as informa√ß√µes de status
    return {
      isRunning: this.isRunning,
      shouldStop: this.shouldStop,
      currentTaskId: this.task?.id,
      currentStepId: this.stepId,
      options: { ...this.options },
      progress: {
        completedCycles,
        totalCycles,
        failedCycles,
        percentComplete: Math.round(completedCycles/totalCycles*100)
      },
      timing: {
        averageTimePerCycle,
        currentCycleStartTime: this.history.length > 0 ? 
          this.history[this.history.length - 1].timestamp : null,
        estimatedTimeRemaining: averageTimePerCycle > 0 ? 
          averageTimePerCycle * (totalCycles - completedCycles) : null
      },
      currentState: {
        lastAgentType: currentAgentType,
        nextAgentType,
        contextLength: this.currentContext.length
      },
      logs,
      history: this.getHistory(),
      lastUpdate: new Date().toISOString()
    };
  }
  
  /**
   * Verifica se o dispatcher est√° em execu√ß√£o
   * @returns true se estiver em execu√ß√£o
   */
  public isExecuting(): boolean {
    return this.isRunning;
  }
}

/**
 * Cria e retorna uma nova inst√¢ncia do dispatcher com as op√ß√µes especificadas
 * @param options Op√ß√µes para o dispatcher
 * @returns Nova inst√¢ncia do dispatcher
 */
export function createIntensiveDispatcher(options: Partial<IntensiveDispatcherOptions> = {}): IntensiveDispatcher {
  const defaultOptions: IntensiveDispatcherOptions = {
    maxCycles: 5,
    timeout: 60000,
    notifyOnProgress: true,
    agents: [
      AgentType.COORDINATOR,
      AgentType.RESEARCHER,
      AgentType.ANALYST, 
      AgentType.ADVISOR,
      AgentType.SUMMARIZER
    ]
  };
  
  return new IntensiveDispatcher({
    ...defaultOptions,
    ...options
  });
}